Databases Project
Partners:
Louie DiBernardo (LDIBERN1)
Sanddhya Jayabalan (SJAYABA1)

Full repo zip download link:
https://livejohnshopkins-my.sharepoint.com/:u:/g/personal/ldibern1_jh_edu/Eag9wyhHAQBNnHqZ6SzOoeoBVy55k5gcpJib4-6CABiT-Q?e=64eEi5

Part 0 Updates:
-Fixed an ordering issue in the original PhaseC sql setup scripts that excluded age range in ConsumptionStats.
-Fixed an ID numbering issue in MetabolicDisease that only allowed the first 150,000k tuples to be added.
-Fixed a column issue in MetabolicDisease where gender and age range were flipped causing unexpected behavior.
-Added in child obesity data for california into the small variant of MetabolicDisease.
-Created reduced file versions of Location,MetabolicDisease, and FoodLegislation to resolve max tuple issue in ugradx.
    -SEE NOTE BELOW REGARDING REDUCED FILES AND ERRORS IN PHASEC
-Decided to always use the reduced location data file that contains states, and states + counties data and does not include
city location tuples since most are not used. We will allow the user to manually add them if needed instead.

Notes regarding PhaseC issues:
Regarding the data importation issues from PhaseC, Louie found out what the problem was. It was not a maximum tuple
restriction on our accounts, it was actually an issue with us using git-lfs with our repo to hold our huge data files.
Anything that was larger than 10MB in size was added to git-lfs. However, this created issues when we pulled to the ugradx
machine since ugradx does not support git-lfs. Louie tried to install it on his instance, but was unsuccessful in getting it setup
due to permission issues. Instead, we decided to just remove the files from git-lfs and recommit them to our repo. This
solved our issues with getting the data files onto ugradx via github. This, however, should not affect the grading for PhaseC,
since we manually submitted our data files via zip from our local install that worked with all files.

Part 1 Notes:
Some questions from PhaseA were unable to be converted into queries since we removed some extraneous tables, and also could not find data
on certain columns for some tables. However, most questions were able to be adapted to newer questions that we then converted into sql queries.

Some queries in the queries.sql file contain two sql statement variations depending on how we want to display data and allow the user to
interact with the data with our website for the final phase. We did not count these second variations in the overall count of sql queries since
they solve the same question but in a slightly different way.

Part 2 Notes:
Specifically for missing foreign keys:
Ideally when the user inserts data, we would have them select the state and county from dropdowns to
ensure the proper locationID is used. However, the user may want to insert data down to the city level.
In this case the user would have to provide us with the state, county, and city that they wish to add and
we would generate an id number for the database. This would mean that it would be impossible to run into
missing foreign key constraint issues with how we currently have things set and plan to set up for PhaseE.

The example we used assumes none of that, but that the user has provided just a locationID for something we do
not have in the database. First we will check if that ID exists, and if not, then add it to the parent table
and then try to insert the data.